"""empty message

Revision ID: fbb3eb95e62e
Revises: fab9bd53103a
Create Date: 2020-04-28 15:37:05.840361

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql
from sqlalchemy.orm import sessionmaker
from sqlalchemy.schema import Sequence, CreateSequence

Session = sessionmaker()

# revision identifiers, used by Alembic.
revision = 'fbb3eb95e62e'
down_revision = 'fab9bd53103a'
branch_labels = None
depends_on = None

#sequence to start from count() PatientState
#index id
def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_column('Patient', 'is_infected')
    op.drop_column('Patient', 'is_found')
    op.add_column('PatientState', sa.Column('attrs', sa.JSON(), nullable=True))
    op.add_column('PatientState', sa.Column('id', sa.Integer(), nullable=True))
    
    bind = op.get_bind()
    session = Session(bind=bind)
    session.execute('UPDATE "PatientState" ou SET id=(SELECT count(*) FROM "PatientState" WHERE ou.created_at > created_at)+1;')
    count = int(session.execute('select count(*) from "PatientState";').fetchone()[0])

    op.alter_column('PatientState', 'id', nullable=False)
    op.execute(CreateSequence(Sequence('patient_state_id_seq')))
    op.alter_column("PatientState", "id", nullable=False, server_default=sa.text("nextval('patient_state_id_seq'::regclass)+%d" % count))
    op.alter_column('PatientState', 'detection_date',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True)
    op.drop_constraint('PatientState_state_id_fkey', 'PatientState', type_='foreignkey')
    op.drop_constraint('PatientState_patient_id_fkey', 'PatientState', type_='foreignkey')
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_foreign_key('PatientState_patient_id_fkey', 'PatientState', 'Patient', ['patient_id'], ['id'])
    op.create_foreign_key('PatientState_state_id_fkey', 'PatientState', 'State', ['state_id'], ['id'])
    op.alter_column('PatientState', 'detection_date',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False)
    op.drop_column('PatientState', 'id')
    op.drop_column('PatientState', 'attrs')
    op.add_column('Patient', sa.Column('is_found', sa.BOOLEAN(), autoincrement=False, nullable=True))
    op.add_column('Patient', sa.Column('is_infected', sa.BOOLEAN(), autoincrement=False, nullable=True))
    # ### end Alembic commands ###
